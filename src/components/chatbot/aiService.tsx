// src/components/chatbot/aiService.ts
import { generateOllamaResponse, isOllamaAvailable } from './ollamaService';

// Cache para respuestas frecuentes
const responseCache = new Map<string, string>();
const CACHE_TTL = 5 * 60 * 1000; // 5 minutos

// Flag para controlar si usar Ollama
let useOllama = false;

// Declaraci√≥n global para TypeScript
declare global {
  interface Window {
    ollamaEnabled?: boolean;
  }
}

// Inicializar la variable global si no existe
if (typeof window !== 'undefined' && typeof window.ollamaEnabled === 'undefined') {
  window.ollamaEnabled = true;
  
  // Escuchar cambios en el estado de Ollama
  window.addEventListener('ollamaStatusChange', ((event: CustomEvent) => {
    const { available, enabled } = event.detail;
    useOllama = available && enabled;
    console.log(`Estado de Ollama actualizado: ${useOllama ? 'Activo' : 'Inactivo'}`);
    console.log(`Disponible: ${available}, Habilitado: ${enabled}`);
  }) as EventListener);
}

// Verificar disponibilidad de Ollama al iniciar
isOllamaAvailable().then(available => {
  useOllama = available;
  console.log(`Ollama ${available ? 'est√°' : 'no est√°'} disponible`);
}).catch(error => {
  console.error('Error al verificar disponibilidad de Ollama:', error);
  useOllama = false;
});

// Funci√≥n para generar una clave de cach√©
const getCacheKey = (query: string, context: string = ''): string => {
  return `${query.toLowerCase().trim()}_${context}`;
};

// Base de conocimiento mejorada para el chatbot
const knowledgeBase = {
  // Informaci√≥n general
  general: [
    'La Municipalidad de San Benito est√° ubicada en la provincia de Entre R√≠os, Argentina.',
    'El intendente actual es Ariel Voeffray.',
    'San Benito es una ciudad en crecimiento con aproximadamente 17,000 habitantes.',
    'La municipalidad ofrece diversos servicios a los ciudadanos como tr√°mites, actividades culturales y deportivas.',
  ],

  // Tr√°mites detallados
  tramitesDetallados: {
    licenciaConducir: {
      nombre: 'Licencia de Conducir',
      descripcion: 'Tr√°mite para obtener o renovar la licencia de conducir',
      requisitos: [
        'DNI original y fotocopia',
        'Certificado de domicilio',
        'Certificado de aptitud psicof√≠sica',
        'Fotos 4x4 color',
        'Pago de tasa municipal'
      ],
      costo: '$5,000',
      duracion: '5 d√≠as h√°biles',
      horario: 'Lunes a Viernes de 7:00 a 13:00 hs',
      lugar: 'Oficina de Tr√°nsito - Municipalidad de San Benito',
      link: '/tramites/licencia'
    },
    obraPrivada: {
      nombre: 'Obra Privada',
      descripcion: 'Permiso para construcci√≥n y reformas en propiedades privadas',
      requisitos: [
        'Plano de obra firmado por profesional matriculado',
        'T√≠tulo de propiedad o autorizaci√≥n del propietario',
        'CUIT/CUIL del profesional a cargo',
        'Pago de tasas municipales'
      ],
      costo: 'Var√≠a seg√∫n m2',
      duracion: '10-15 d√≠as h√°biles',
      horario: 'Lunes a Viernes de 7:00 a 13:00 hs',
      lugar: 'Oficina de Obras Privadas - Municipalidad de San Benito',
      link: '/tramites/obras-privadas'
    },
    habilitacionComercial: {
      nombre: 'Habilitaci√≥n Comercial',
      descripcion: 'Permiso para habilitar locales comerciales',
      requisitos: [
        'DNI y CUIT/CUIL',
        'T√≠tulo de propiedad o contrato de alquiler',
        'Planos del local',
        'Habilitaci√≥n Bomberos (si corresponde)'
      ],
      costo: 'Var√≠a seg√∫n rubro',
      duracion: '7-10 d√≠as h√°biles',
      horario: 'Lunes a Viernes de 7:00 a 13:00 hs',
      lugar: 'Oficina de Habilitaciones - Municipalidad de San Benito',
      link: '/tramites/habilitaciones'
    }
  },

  // Preguntas frecuentes
  faq: [
    {
      pregunta: '¬øC√≥mo saco turno para el registro civil?',
      respuesta: 'Puede solicitar turno a trav√©s de nuestra p√°gina web en la secci√≥n de tr√°mites o personalmente en Mesa de Entrada.'
    },
    {
      pregunta: '¬øD√≥nde pago mis impuestos?',
      respuesta: 'Puede realizar sus pagos en la oficina de Rentas de lunes a viernes de 7:00 a 13:00 hs, o a trav√©s de nuestra p√°gina web.'
    },
    {
      pregunta: '¬øC√≥mo denuncio un problema en la v√≠a p√∫blica?',
      respuesta: 'Puede realizar su denuncia en el Centro de Atenci√≥n al Vecino (CAV) llamando al 3436127013 o personalmente en nuestras oficinas.'
    }
  ],

  // Contacto
  contacto: [
    'üìß Email principal: Modernizacion@sanbenito.gob.ar',
    'üìû Tel√©fono principal: (0343) 497-3454',
    'üì± WhatsApp: 3436127013',
    'üìç Direcci√≥n: Av. San Mart√≠n 1234, San Benito, Entre R√≠os',
    '\nüìå Oficinas municipales:\n' +
    '‚Ä¢ Mesa de entrada: (0343) 497-3454\n' +
    '‚Ä¢ Rentas: 3436127015\n' +
    '‚Ä¢ Licencia de Conducir: 3436127014\n' +
    '‚Ä¢ Habilitaciones: 3434537319\n' +
    '‚Ä¢ Punto Digital / Biblioteca: 3434508085\n' +
    '‚Ä¢ Centro de Atenci√≥n al Vecino: 3436127013'
  ],

  // Horarios
  horarios: [
    'üèõÔ∏è Edificio Municipal: Lunes a Viernes de 7:00 a 13:00 hs',
    'üí∞ Rentas: Lunes a Viernes de 7:00 a 13:00 hs',
    'üèóÔ∏è Obras Privadas: Lunes a Viernes de 7:00 a 13:00 hs',
    'üíª Punto Digital: Lunes a Viernes de 7:00 a 13:00 y 16:00 a 20:00 hs',
    'üë• Centro de Atenci√≥n al Vecino: Lunes a Viernes de 7:00 a 13:00',
    'üìö Biblioteca Municipal: Lunes a Viernes de 8:00 a 12:00 y 15:00 a 19:00 hs',
    '‚öΩ Polideportivo: Lunes a Domingo de 8:00 a 22:00 hs'
  ],

  // Servicios
  servicios: [
    'üèãÔ∏è Actividades deportivas para todas las edades',
    'üé® Talleres culturales gratuitos',
    'üíª Punto digital con acceso a computadoras e internet',
    'üë© √Årea de la mujer con asesoramiento y apoyo',
    'üë• Centro de Atenci√≥n al Vecino (CAV)',
    'üìö Biblioteca p√∫blica con amplio cat√°logo',
    'üèõÔ∏è Asesoramiento legal gratuito (consultar horarios)',
    'üå≥ Espacios verdes y plazas de juegos',
    'üöÆ Servicio de recolecci√≥n de residuos y limpieza'
  ]
};

// URLs importantes del sitio web
const websiteUrls = {
  home: '/',
  noticias: '/noticias',
  tramites: '/tramites',
  contacto: '/contacto',
  transparencia: '/transparencia',
  licencias: '/tramites/licencia',
  obrasPrivadas: '/tramites/obras-privadas',
  habilitaciones: '/tramites/habilitaciones',
  rentas: '/tramites/rentas',
  catastro: '/tramites/catastro',
  mesaEntrada: '/tramites/mesa-de-entrada',
  deportes: '/tramites/actividades-deportivas',
  areaMujer: '/tramites/area-mujer',
  talleresCulturales: '/tramites/talleres-culturales',
  centroAtencionVecino: '/tramites/cav',
}

// Palabras clave para detectar intenciones
const keywords = {
  tramites: ['tramite', 'tr√°mite', 'gesti√≥n', 'procedimiento', 'solicitud', 'formulario'],
  licencias: ['licencia', 'carnet', 'conducir', 'registro', 'brevete'],
  obras: ['obra', 'construcci√≥n', 'edificaci√≥n', 'plano', 'permiso de obra'],
  habilitaciones: ['habilitaci√≥n', 'habilitaciones', 'comercio', 'negocio', 'local'],
  rentas: ['renta', 'impuesto', 'tasa', 'pago', 'tributo', 'contribuci√≥n'],
  horarios: ['horario', 'hora', 'atenci√≥n', 'abierto', 'cerrado'],
  contacto: ['contacto', 'tel√©fono', 'telefono', 'email', 'correo', 'llamar', 'comunicar'],
  ubicacion: ['ubicaci√≥n', 'ubicacion', 'direcci√≥n', 'direccion', 'donde', 'd√≥nde', 'llegar'],
  centroAtencionVecino: [
    'centro',
    'atencion',
    'vecino',
    'cav',
    'centro de atencion al vecino',
    'reclamo',
    'queja',
    'quejas',
    'reclamos',
    'queja',
    'quejas',
    'reclamo',
    'reclamos',
  ],
}

/**
 * Funci√≥n para buscar en la base de conocimiento con coincidencias parciales mejorada
 * @param query Consulta del usuario
 * @returns Respuesta formateada o null
 */
function searchKnowledgeBase(query: string): string | null {
  const normalizedQuery = query.toLowerCase().trim();
  
  // Verificar cach√© primero
  const cacheKey = getCacheKey(normalizedQuery, 'search');
  if (responseCache.has(cacheKey)) {
    return responseCache.get(cacheKey) || null;
  }

  // 1. Buscar en preguntas frecuentes
  for (const faq of knowledgeBase.faq || []) {
    if (faq.pregunta.toLowerCase().includes(normalizedQuery) || 
        normalizedQuery.includes(faq.pregunta.toLowerCase())) {
      const response = `‚ùì ${faq.pregunta}\n\n${faq.respuesta}`;
      responseCache.set(cacheKey, response);
      setTimeout(() => responseCache.delete(cacheKey), CACHE_TTL);
      return response;
    }
  }

  // 2. Buscar en tr√°mites detallados
  for (const [tramiteId, tramite] of Object.entries(knowledgeBase.tramitesDetallados || {})) {
    const tramiteInfo = tramite as any;
    const tramiteName = tramiteInfo.nombre?.toLowerCase() || '';
    
    if (normalizedQuery.includes(tramiteName) || 
        tramiteName.includes(normalizedQuery) ||
        normalizedQuery.includes(tramiteId.toLowerCase().replace(/([A-Z])/g, ' $1').toLowerCase())) {
      
      const response = `üìã *${tramiteInfo.nombre}*\n\n` +
        `‚ÑπÔ∏è ${tramiteInfo.descripcion}\n\n` +
        `üìå *Requisitos:*\n` +
        tramiteInfo.requisitos.map((r: string, i: number) => `  ${i+1}. ${r}`).join('\n') + '\n\n' +
        `üíµ *Costo:* ${tramiteInfo.costo}\n` +
        `‚è±Ô∏è *Duraci√≥n:* ${tramiteInfo.duracion}\n` +
        `üïí *Horario de atenci√≥n:* ${tramiteInfo.horario}\n` +
        `üìç *Lugar:* ${tramiteInfo.lugar}\n\n` +
        `üîó [M√°s informaci√≥n](${tramiteInfo.link})`;
      
      responseCache.set(cacheKey, response);
      setTimeout(() => responseCache.delete(cacheKey), CACHE_TTL);
      return response;
    }
  }

  // 3. B√∫squeda por palabras clave en todas las categor√≠as
  const queryWords = normalizedQuery.split(/\s+/).filter(word => word.length > 2);
  
  // Buscar en todas las categor√≠as
  for (const [category, items] of Object.entries(knowledgeBase)) {
    // Saltar categor√≠as que ya procesamos
    if (['tramitesDetallados', 'faq'].includes(category)) continue;
    
    // Si la categor√≠a coincide con la consulta
    if (normalizedQuery.includes(category.toLowerCase())) {
      const response = formatCategoryResponse(category, items);
      if (response) return response;
    }
    
    // Buscar en los √≠tems de la categor√≠a
    if (Array.isArray(items)) {
      for (const item of items) {
        const itemLower = typeof item === 'string' ? item.toLowerCase() : item.pregunta.toLowerCase();
        const matchScore = queryWords.reduce((score, word) => 
          itemLower.includes(word) ? score + word.length : score, 0);
          
        if (matchScore > 0) {
          const response = formatCategoryResponse(category, [item]);
          if (response) return response;
        }
      }
    }
  }
  
  return null;
}

/**
 * Formatea la respuesta para una categor√≠a espec√≠fica
 */
function formatCategoryResponse(category: string, items: any): string | null {
  // Si items es null o undefined, o un array vac√≠o
  if (!items || (Array.isArray(items) && items.length === 0)) return null;
  
  const categoryTitles: {[key: string]: string} = {
    'contacto': 'üìû *Contactos y Ubicaci√≥n*',
    'horarios': 'üïí *Horarios de Atenci√≥n*',
    'servicios': 'üèõÔ∏è *Servicios Municipales*',
    'general': '‚ÑπÔ∏è *Informaci√≥n General*',
  };
  
  const title = categoryTitles[category] || `üìã ${category.charAt(0).toUpperCase() + category.slice(1)}`;
  
  let formattedItems = '';
  
  // Manejar diferentes tipos de datos
  if (Array.isArray(items)) {
    // Si es un array, procesarlo como antes
    formattedItems = items.map(item => 
      typeof item === 'string' ? `‚Ä¢ ${item}` : JSON.stringify(item)
    ).join('\n');
  } else if (typeof items === 'object') {
    // Si es un objeto, formatear sus propiedades
    formattedItems = Object.entries(items).map(([key, value]) => {
      const itemName = key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1');
      return `‚Ä¢ ${itemName}: ${typeof value === 'object' ? '(informaci√≥n detallada disponible)' : value}`;
    }).join('\n');
  } else {
    // Para cualquier otro tipo
    formattedItems = String(items);
  }
  
  return `${title}\n\n${formattedItems}`;
}

/**
 * Funci√≥n para detectar la intenci√≥n del usuario basada en palabras clave mejorada
 * @param query Consulta del usuario
 * @returns Intenci√≥n detectada o null si no hay coincidencia
 */
export function detectIntent(query: string): string | null {
  const lowerQuery = query.toLowerCase();
  
  // Primero buscar coincidencias exactas
  for (const intent in keywords) {
    if (Object.prototype.hasOwnProperty.call(keywords, intent)) {
      const keywordList = keywords[intent as keyof typeof keywords];
      
      // Coincidencia exacta de palabras clave
      if (keywordList.some(keyword => {
        const regex = new RegExp(`\\b${keyword}\\b`, 'i');
        return regex.test(lowerQuery);
      })) {
        return intent;
      }
    }
  }
  
  // Si no hay coincidencia exacta, buscar coincidencias parciales
  const queryWords = lowerQuery.split(/\s+/);
  const wordScores: {[key: string]: number} = {};
  
  // Contar ocurrencias de palabras clave
  for (const intent in keywords) {
    if (Object.prototype.hasOwnProperty.call(keywords, intent)) {
      const keywordList = keywords[intent as keyof typeof keywords];
      
      keywordList.forEach(keyword => {
        queryWords.forEach(word => {
          if (word.length > 3 && keyword.includes(word)) {
            wordScores[intent] = (wordScores[intent] || 0) + word.length;
          }
        });
      });
    }
  }
  
  // Devolver la intenci√≥n con mayor puntuaci√≥n
  let bestMatch = { intent: '', score: 0 };
  for (const [intent, score] of Object.entries(wordScores)) {
    if (score > bestMatch.score) {
      bestMatch = { intent, score };
    }
  }
  
  return bestMatch.score > 0 ? bestMatch.intent : null;
}

/**
 * Funci√≥n principal para obtener una respuesta de IA mejorada
 * @param query Consulta del usuario
 * @returns Objeto con la respuesta generada y si se us√≥ Gemma 2B
 */
export async function fetchAIResponse(query: string): Promise<{ response: string; usedGemma: boolean }> {
  if (!query || typeof query !== 'string' || query.trim() === '') {
    return { 
      response: 'Por favor, ingresa una consulta para que pueda ayudarte.',
      usedGemma: false
    };
  }
  
  const normalizedQuery = query.toLowerCase().trim();
  
  // Verificar si hay una respuesta en cach√©
  const cacheKey = getCacheKey(normalizedQuery, 'response');
  const cachedResponse = responseCache.get(cacheKey);
  if (cachedResponse) {
    console.log('Respuesta recuperada de cach√©');
    return { response: cachedResponse, usedGemma: false };
  }
  
  // 1. Manejar saludos y despedidas
  if (/(hola|buen(a|o)s (d√≠as|tardes|noches)|saludos|hi|hello)/i.test(normalizedQuery)) {
    const saludos = [
      '¬°Hola! Soy Beni, tu asistente virtual de la Municipalidad de San Benito. ¬øEn qu√© puedo ayudarte hoy?',
      '¬°Buen d√≠a! ¬øEn qu√© puedo asistirte hoy?',
      '¬°Hola! ¬øC√≥mo est√°s? Estoy aqu√≠ para ayudarte con informaci√≥n sobre la Municipalidad de San Benito.'
    ];
    const respuesta = saludos[Math.floor(Math.random() * saludos.length)];
    responseCache.set(cacheKey, respuesta);
    setTimeout(() => responseCache.delete(cacheKey), CACHE_TTL);
    return { response: respuesta, usedGemma: false };
  }
  
  if (/(chau|adios|hasta luego|nos vemos|bye)/i.test(normalizedQuery)) {
    const despedidas = [
      '¬°Hasta luego! Que tengas un excelente d√≠a. Si necesitas algo m√°s, aqu√≠ estar√© para ayudarte.',
      '¬°Nos vemos! No dudes en consultarme si tienes m√°s preguntas.',
      '¬°Hasta pronto! Recuerda que estoy disponible cuando me necesites.'
    ];
    const respuesta = despedidas[Math.floor(Math.random() * despedidas.length)];
    responseCache.set(cacheKey, respuesta);
    setTimeout(() => responseCache.delete(cacheKey), CACHE_TTL);
    return { response: respuesta, usedGemma: false };
  }
  
  // 2. Buscar en la base de conocimiento mejorada
  const knowledgeMatch = searchKnowledgeBase(normalizedQuery);
  if (knowledgeMatch) {
    responseCache.set(cacheKey, knowledgeMatch);
    setTimeout(() => responseCache.delete(cacheKey), CACHE_TTL);
    return { response: knowledgeMatch, usedGemma: false };
  }
  
  // 3. Detectar intenci√≥n
  const intent = detectIntent(normalizedQuery);
  
  // 4. Generar respuesta basada en la intenci√≥n
  let response = '';
  
  let usedGemma = false;
  
  switch (intent) {
    case 'tramites':
      response = 'Puedo ayudarte con informaci√≥n sobre tr√°mites. ¬øPodr√≠as ser m√°s espec√≠fico sobre qu√© tr√°mite necesitas realizar?';
      break;
    case 'licencias':
      response = 'Para obtener informaci√≥n sobre licencias de conducir, por favor especifica qu√© necesitas saber: requisitos, renovaci√≥n o turnos.';
      break;
    case 'obras':
      response = 'Para consultas sobre obras privadas, necesitar√≠a m√°s detalles. ¬øEs sobre permisos de construcci√≥n, planos u otra consulta?';
      break;
    case 'habilitaciones':
      response = 'Puedo ayudarte con informaci√≥n sobre habilitaciones comerciales. ¬øNecesitas saber requisitos, documentaci√≥n o estado de tr√°mite?';
      break;
    case 'rentas':
      response = 'Para consultas sobre rentas, necesito m√°s detalles. ¬øEs sobre pagos, deuda, planes de pago u otra consulta?';
      break;
    case 'horarios':
      response = 'Los horarios de atenci√≥n son de lunes a viernes de 7:00 a 13:00 hs. Algunas √°reas tienen horarios especiales. ¬øQu√© √°rea espec√≠fica te interesa?';
      break;
    case 'contacto':
      response = 'Puedes contactarnos por tel√©fono al (0343) 497-3454, por email a Modernizacion@sanbenito.gob.ar o personalmente en nuestro horario de atenci√≥n.';
      break;
    case 'ubicacion':
      response = 'La Municipalidad de San Benito se encuentra en [direcci√≥n completa]. ¬øNecesitas indicaciones para llegar?';
      break;
    default:
      // Verificar si Ollama est√° disponible y habilitado globalmente
      const ollamaEnabled = typeof window !== 'undefined' ? window.ollamaEnabled !== false : true;
      
      if (useOllama && ollamaEnabled) {
        try {
          console.log('Usando Gemma 2B para generar respuesta...');
          
          // Notificar a la interfaz que estamos comenzando a usar Gemma 2B
          console.log('Iniciando generaci√≥n con Gemma 2B');
          
          const ollamaResponse = await generateOllamaResponse(query);
          
          if (ollamaResponse && ollamaResponse.trim() !== '') {
            response = ollamaResponse;
            usedGemma = true;
            console.log('Respuesta generada exitosamente con Gemma 2B');
          } else {
            console.warn('Gemma 2B devolvi√≥ una respuesta vac√≠a');
            throw new Error('Respuesta vac√≠a de Gemma 2B');
          }
        } catch (error) {
          console.error('Error al obtener respuesta de Ollama:', error);
          response = getFallbackResponse();
          console.log('Usando respuesta alternativa debido a error en Gemma 2B');
        }
      } else {
        if (!ollamaEnabled) {
          console.log('Gemma 2B est√° desactivado por configuraci√≥n del administrador');
        } else if (!useOllama) {
          console.log('Gemma 2B no est√° disponible - el servidor no responde');
        }
        response = getFallbackResponse();
        console.log('Usando respuesta alternativa sin Gemma 2B');
      }
  }
  
  // Guardar en cach√© y devolver la respuesta
  responseCache.set(cacheKey, response);
  setTimeout(() => responseCache.delete(cacheKey), CACHE_TTL);
  
  // Registrar en consola si se us√≥ Gemma 2B
  if (usedGemma) {
    console.log('Respuesta generada con Gemma 2B:', { query, responseLength: response.length });
  } else {
    console.log('Respuesta generada sin Gemma 2B (usando base de conocimiento o respuestas predefinidas)');
  }
  
  return { response, usedGemma };
}

/**
 * Obtiene una respuesta predeterminada cuando no hay coincidencia clara
 * @returns Respuesta predeterminada
 */
function getFallbackResponse(): string {
  return 'No encontr√© informaci√≥n espec√≠fica sobre tu consulta. ¬øQuiz√°s te refieres a alguno de estos temas?\n' +
    '‚Ä¢ Tr√°mites municipales\n' +
    '‚Ä¢ Horarios de atenci√≥n\n' +
    '‚Ä¢ Contacto y ubicaci√≥n\n' +
    '‚Ä¢ Requisitos para licencias\n' +
    '‚Ä¢ Habilitaciones comerciales';
}
